esphome:
  name: "${device_name}"
  comment: "${device_description}"
  name_add_mac_suffix: false
  project:
    name: "${project_name}"
    version: "${project_version}"

substitutions:
  device_name: "gas-meter"
  friendly_name: "Gas Meter"
  device_description: "Measure the household gas meter consumption"
  project_name: "home-gas-meter.esp8266"
  project_version: "0.1"

# Choose the right Platform
# esp32: https://esphome.io/components/esp32.html
# esp8266: https://esphome.io/components/esp8266.html
esp8266:
  board: esp01_1m
  restore_from_flash: true

# WiFi credentials #
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .iot.home.lan

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Gas-Meter Fallback Hotspot"
    password: "8tQiz8ufiWTk"

preferences:
  flash_write_interval: 5min

# Enable Home Assistant API
api:
  encryption:
    key: "YamQPfQvLIPBEtRZTRA5u7+QajSe+oFWyQZwcOqp13A="

ota:
  password: "a9a3103541255b3c8f381d12941d11dc"

# Enable logging
logger:
#  baud_rate: 0

mdns:
  disabled: false

web_server:
  port: 80

captive_portal:


#uart:
#  rx_pin: RX
#  baud_rate: 4800

# This is for saving the total_gas sensor every so often, incase of a power cycle
#globals:
#  - id: total_gas
#    type: float
#    restore_value: yes
#  - id: save_usage_frequency
#    type: int    
#    initial_value: '0.0'

# Sensors for ESP version and WiFi information
text_sensor:
  - platform: wifi_info
    ip_address:
      name: '${friendly_name} - WiFi IP Address'
      icon: mdi:wifi
      disabled_by_default: false
    ssid:
      name: '${friendly_name} - WiFi SSID'
      icon: mdi:wifi-strength-2
    mac_address:
      name: '${friendly_name} - WiFi MAC Address'
  - platform: version
    hide_timestamp: true
    name: '${friendly_name} - Version of ESPHome'
# Installed version of Project
  - platform: template
    name: '${friendly_name} - Project Name'
    id: gas_meter_project
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_name}"};
    update_interval: 6h

  - platform: template
    name: '${friendly_name} - Project Version'
    id: gas_meter_version
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_version}"};
    update_interval: 6h

binary_sensor:
  - platform: status
    name: '${friendly_name} - Status'

sensor:

# Send WiFi signal strength & uptime to HA
  - platform: wifi_signal
    name: "${friendly_name} - WiFi Strength"
    update_interval: 120s

# Sensor uptime in seconds
  - platform: uptime
    name: "${friendly_name} - Uptime Sensor"

# Gas pulse meter on GPIO 5 & 0.01m3 (10L) increments
  - platform: pulse_meter
    name: '${friendly_name} - Flow Rate'
    id: "sensor_gas_flow_rate"
    unit_of_measurement: "m3/h"
    state_class: measurement
    device_class: gas
    icon: "mdi:pump"
    accuracy_decimals: 2
    pin:
      number: 5
      inverted: true
      mode: INPUT_PULLUP
    internal_filter_mode: PULSE
    internal_filter: 100ms
    timeout: 1min
    filters:
      - multiply: 0.01
    total:    
      name: '${friendly_name} - Consumption'
      id: sensor_gas_consumption
      unit_of_measurement: "m3"
      icon: "mdi:gas"
      state_class: "total_increasing"
      device_class: gas
      accuracy_decimals: 2
      filters:
        - multiply: 0.01

# Enable time component to reset energy at midnight
# https://esphome.io/components/time.html#home-assistant-time-source
time:
    platform: sntp
    id: homeassistant_time