  #  Go to HA Developer Tools --> Services and select the 'Utility Meter: Calibrate' and sensor 
  #  'Gas Consumed Quarterly mj Total'and enter your physical meter reading after subtracting the
  #  last meter reading from your last bill. Remeber to use use the m3 with your retailers correction factor applied

substitutions:
  # Provides substitutions or variables that are then called elsewhere multiple times in the config
  device_name: "gas-meter"
  friendly_name: "Gas Meter"
  device_description: "Measure the household gas consumption, on Elster 750 meter"
  project_name: "esphome.gas-meter"
  project_version: "1.1"
  timezone: "Australia/Sydney"
  disable_entities: "false"

esphome:
  #  Configures these settings to use the substituions defined below
  name: "${device_name}"
  comment: "${device_description}"
  name_add_mac_suffix: false
  project:
    name: "${project_name}"
    version: "${project_version}"

# Choose the right Platform
# esp32: https://esphome.io/components/esp32.html
# esp8266: https://esphome.io/components/esp8266.html
esp8266:
  # Define the type of ESP8266 board being used
  board: esp01_1m
  # Enables the ESP to restore the 'pulse count' used to record the 'Reading Total' sensor. Not required for ESP32.
  restore_from_flash: true

preferences:
  # Enable to allow storing of 'Read Total' between reboots and flashing.
  flash_write_interval: 5min

  #  Enable logging
logger:

mdns:
  disabled: false

web_server:
  #  Enables the local webserver on the ESP device, upon port 80
  port: 80

  #  Enable time component to reset energy at midnight
time:
  # Set sync to SNTP method
    platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: "Australia/Sydney"
  # Change sync interval from default 5min
    update_interval: 360min
  # Set specific sntp servers to use
    servers: 
      - 2.au.pool.ntp.org
      - 1.au.pool.ntp.org
      - 0.au.pool.ntp.org
  #  Alternative sync option to sntp, using HA instances time
#    platform: homeassistant

captive_portal:
  #  Enables the fall back WiFi hotspot and ability to connect and recover the device.
  #  See: https://esphome.io/components/captive_portal.html


wifi:
  # WiFi credentials
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Set the DNS domain of the device
  domain: .iot.home.lan
  # Directly connects to WiFi network without doing a full scan first
  fast_connect: true
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Gas-Meter Fallback Hotspot"
    password: "8tQiz8ufiWTk"

api:
  # Enable encryption with Home Assistant API
  encryption:
    key: "YamQPfQvLIPBEtRZTRA5u7+QajSe+oFWyQZwcOqp13A="
  # Define service that calls the 'button:' defined below to reset the (current) Reading'
  services:
    - service: reset_total_energy
      then:
        - button.press:
            id: button_reset_reading

ota:
  # Sets OTA password, that ESPHome must use when connecting to flash updates
  password: "a9a3103541255b3c8f381d12941d11dc"

button:
  #  Restart the ESP Device
  - platform: restart
    name: '${friendly_name} - Restart'
    entity_category: diagnostic
  #  Reset the total energy entity (Gas Meter - Reading)
  - platform: template
    name: '${friendly_name} - Reset Reading'
    entity_category: diagnostic
    id: button_reset_reading
    on_press:
      - pulse_meter.set_total_pulses:
          id: sensor_gas_flow_rate
          value: 0

globals:
  #  Globals for use with pulse meter, to allow storing and setting a base reading
  - id: total_m3
    type: float
    restore_value: yes
#  initial_value: "0"

binary_sensor:
  #  Creates the status sensor
  - platform: status
    name: '${friendly_name} - Status'

text_sensor:
  #  Creates sensor for tracking the WiFi IP address
  - platform: wifi_info
    ip_address:
      name: '${friendly_name} - WiFi IP Address'
      icon: mdi:wifi
      entity_category: diagnostic
      disabled_by_default: $disable_entities
  #  Defines the WiFi SSID network to connect to
    ssid:
      name: '${friendly_name} - WiFi SSID'
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
      disabled_by_default: $disable_entities
  #  Creates sensor for tracking the WiFi IP MAC address
    mac_address:
      name: '${friendly_name} - WiFi MAC Address'
      entity_category: diagnostic
      disabled_by_default: $disable_entities
  #  Creates sensor for tracking the version of ESPHome installed
  - platform: version
    hide_timestamp: true
    name: '${friendly_name} - Version of ESPHome'
    entity_category: diagnostic
    disabled_by_default: $disable_entities
  #  Creates a sensor of the name of installed project
  - platform: template
    name: '${friendly_name} - Project Name'
    id: gas_meter_project
    icon: "mdi:label-outline"
    entity_category: diagnostic
    disabled_by_default: $disable_entities
    lambda: |-
      return {"${project_name}"};
    update_interval: 6h
  #  Creates a sensor of the version of installed project
  - platform: template
    name: '${friendly_name} - Project Version'
    id: gas_meter_version
    icon: "mdi:label-outline"
    entity_category: diagnostic
    disabled_by_default: $disable_entities
    lambda: |-
      return {"${project_version}"};
    update_interval: 6h


sensor:
  #  Send WiFi signal strength & uptime to HA
  - platform: wifi_signal
    name: "${friendly_name} - WiFi Strength"
    update_interval: 120s
    entity_category: diagnostic
    disabled_by_default: $disable_entities
  #  Sensor uptime in seconds
  - platform: uptime
    name: "${friendly_name} - Uptime Sensor"
    update_interval: 120s
    entity_category: diagnostic
    disabled_by_default: $disable_entities


############ DEVICE SPECIFIC SETTINGS ############

  #  Gas pulse meter on GPIO 5 & 0.01m3 (10L) increments
  - platform: pulse_meter
    name: '${friendly_name} - Flow Rate'
    id: "sensor_gas_flow_rate"
    unit_of_measurement: "m³/h"
    state_class: measurement
    device_class: gas
    icon: "mdi:pump"
    accuracy_decimals: 2
    pin:
      number: 5
      inverted: true
      mode: INPUT_PULLUP
    internal_filter_mode: PULSE
    internal_filter: 2s
    timeout: 5min
    filters:
      - multiply: 1.0
    #  Uses the above pulse_meter and adds sensor and calculations for tracking m3
    total:    
      name: '${friendly_name} - Reading'
      id: sensor_gas_reading
      unit_of_measurement: "m³"
      icon: "mdi:counter"
      state_class: "total_increasing"
      device_class: gas
      accuracy_decimals: 2
      filters:
        - multiply: 0.01
    #  Adds the calculation for 'Reading Total' 
      on_value: 
        then:
          - lambda: |-
              static float previous_m3_value = 0.0;
              float current_m3_value = id(sensor_gas_reading).state;
              id(total_m3) += current_m3_value - previous_m3_value;
              previous_m3_value = current_m3_value;

  #  Adds the 'Reading Total' that tracks the LIFETIME total of m3
  - platform: template
    name: "${friendly_name} - Reading Total"
    id: sensor_gas_reading_total
    unit_of_measurement: "m³"
    device_class: gas
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 2
    # The number 5251.07 should be replaced with your own gas meters physical reading
    lambda: |-
          return (id(total_m3) + 5245.28);
    # Set interval that updates are sent to HA instance
    update_interval: 15s
