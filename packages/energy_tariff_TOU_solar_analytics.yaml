### This package assumes you have an import sensor from Solar Analytics "sensor.sa_todays_energy_imported_kwh" 
### which provides cumulative electricity imported in kWh and an export sensor "sensor.sa_todays_energy_exported_kwh"
### which provides cumulative electricity exported in kWh. 

### If you use other sensor names, adjust everything below as required to match. 
### Credits to SgtBatten for original code this was developed from.

binary_sensor:
  - platform: workday
    name: Workday Sensor
    country: AU
    province: NSW ### your state code
    workdays: [mon, tue, wed, thu, fri, holiday]
    excludes: [sat, sun]
#    remove_holidays:
#      - "Bank Holiday"

sensor:
  - platform: time_date
    display_options:
      - "date"

#############################

  - platform: template
    sensors:

## Convert Solar Analytics - Total Energy Consumed (Today) from Wh to kWh
      sa_todays_energy_consumed_total_kwh:
        friendly_name: 'Total Energy Consumed - kWh'
        unit_of_measurement: 'kWh'
        value_template: "{{ states('sensor.sa_todays_energy_consumed_total') | float / 1000 }}"
        icon_template: mdi:solar-power

## Convert Solar Analytics - Total Energy Exported (Today) from Wh to kWh
      sa_todays_energy_exported_kwh:
        friendly_name: 'Total Energy Exported - kWh'
        unit_of_measurement: 'kWh'
        value_template: "{{ states('sensor.sa_todays_energy_exported') | float / 1000 }}"
        icon_template: mdi:solar-power

## Convert Solar Analytics - Total Energy Generated (Today) from Wh to kWh
      sa_todays_energy_generated_total_kwh:
        friendly_name: 'Total Energy Generated - kWh'
        unit_of_measurement: 'kWh'
        value_template: "{{ states('sensor.sa_todays_energy_generated_total') | float / 1000 }}"
        icon_template: mdi:solar-power

## Convert Solar Analytics - Total Energy Imported (Today) from Wh to kWh
      sa_todays_energy_imported_kwh:
        friendly_name: 'Total Energy Imported - kWh'
        unit_of_measurement: 'kWh'
        value_template: "{{ states('sensor.sa_todays_energy_imported') | float / 1000 }}"
        icon_template: mdi:solar-power


#############################

template:
  - sensor:
      - name: Days Remaining in Month
        unique_id: days_remaining_in_month
        state: >
          {% set this = now().replace(hour=0).replace(minute=0).replace(second=0).replace(microsecond=0) %}
          {% set next = this.month + 1 if this.month + 1 <= 12 else 1 %}
          {% set last = this.replace(year=this.year + 1, month=1, day=1) if now().month == 12 else this.replace(month=next, day=1) %}
          {{ (last.date() - this.date()).days - 1 }}

      - name: Electricity Import Rate Peak
        unique_id: electricity_import_rate_peak
        icon: mdi:cash-minus
        unit_of_measurement: $/kWh
        state: 0.31680                                                            ### edit to your peak import rate

      - name: Electricity Import Rate Shoulder
        unique_id: electricity_import_rate_shoulder
        icon: mdi:cash-minus
        unit_of_measurement: $/kWh
        state: 0.29645                                                            ### edit to your shoulder import rate

      - name: Electricity Import Rate Off Peak
        unique_id: electricity_import_rate_off_peak
        icon: mdi:cash-minus
        unit_of_measurement: $/kWh
        state: 0.16632                                                            ### edit to your off peak import rate

      - name: Electricity Export Rate
        unique_id: electricity_export_rate
        icon: mdi:cash-plus
        unit_of_measurement: $/kWh
        state: 0.06000                                                            ### edit to your solar feed-in-tariff /export rate

      - name: Electricity Supply Charge
        unique_id: electricity_supply_charge
        icon: mdi:cash-plus
        unit_of_measurement: $/day
        state: 1.39370                                                            ### edit to your daily supply charge

      - name: Tariff - Electricity                                                ### Select this in Energy Dashboard to show daily energy costs
        unique_id: tariff_electricity                                             ### based upon used kWh and daily supply charge (preferred option)
        icon: mdi:currency-usd
        state_class: total_increasing
        device_class: monetary
        unit_of_measurement: $
        state: >
          {% set supply = states('sensor.electricity_supply_charge') | float(0) %}
          {% set offpeak = states('sensor.electricity_imported_power_daily_off_peak') | float(0) * states('sensor.electricity_import_rate_off_peak') | float(0) %}
          {% set shoulder = states('sensor.electricity_imported_power_daily_shoulder') | float(0) * states('sensor.electricity_import_rate_shoulder') | float(0) %}
          {% set peak = states('sensor.electricity_imported_power_daily_peak') | float(0) * states('sensor.electricity_import_rate_peak') | float(0) %}
          {{ (supply + offpeak + shoulder + peak) | round(2) }}

      - name: "Electricity Total Cost Daily"                                      ### Select this in Energy Dashboard to show daily energy costs
        unique_id: electricity_total_cost_daily                                   ### based upon used kWh daily supply charge minus FIT not recommended
        icon: mdi:currency-usd                                                    ### if you have Export tracking enabled and FIT applied there
        unit_of_measurement: $
        state_class: total
        device_class: monetary
        state: >
          {% set supply = states('sensor.electricity_supply_charge') | float(0) %}
          {% set offpeak = states('sensor.electricity_imported_power_daily_off_peak') | float(0) * states('sensor.electricity_import_rate_off_peak') | float(0) %}
          {% set shoulder = states('sensor.electricity_imported_power_daily_shoulder') | float(0) * states('sensor.electricity_import_rate_shoulder') | float(0) %}
          {% set peak = states('sensor.electricity_imported_power_daily_peak') | float(0) * states('sensor.electricity_import_rate_peak') | float(0) %}
          {% set feedintariff = states('sensor.electricity_exported_power_daily') | float(0) * states('sensor.electricity_export_rate') | float(0) %}
          {{ (supply + offpeak + shoulder + peak - feedintariff) | round(2) }}



###############

utility_meter:
  electricity_imported_power_daily:
    source: sensor.sa_todays_energy_imported_kwh
    name: Electricity Imported Power Daily
    cycle: daily
    tariffs:
      - peak
      - shoulder
      - off-peak

  electricity_imported_power_monthly:
    source: sensor.sa_todays_energy_imported_kwh
    name: Electricity Imported Power Monthly
    cycle: monthly
    tariffs:
      - peak
      - shoulder
      - off-peak

  electricity_imported_power_yearly:
    source: sensor.sa_todays_energy_imported_kwh
    name: Electricity Imported Power Yearly
    cycle: yearly
    tariffs:
      - peak
      - shoulder
      - off-peak

  electricity_exported_power_daily:
    source: sensor.sa_todays_energy_exported_kwh
    name: Electricity Exported Power Daily
    cycle: daily

  electricity_exported_power_monthly:
    source: sensor.sa_todays_energy_exported_kwh
    name: Electricity Exported Power Monthly
    cycle: monthly

  electricity_exported_power_yearly:
    source: sensor.sa_todays_energy_exported_kwh
    name: Electricity Exported Power Yearly
    cycle: yearly


###############

automation:
### adjust the time triggers below to match when your standard electricity tariff changes (peak, shoulder, offpeak). Adjust the template in the action block as required to match your plan.
  - alias: Set Electricity Tariff
    description: 'Set Electricity Tariff'
    trigger:
      - platform: time
        at: '07:04:00'
      - platform: time
        at: '09:04:00'
      - platform: time
        at: '17:04:00'
      - platform: time
        at: '20:04:00'
      - platform: time
        at: '22:04:00'
      - platform: homeassistant
        event: start
    condition: []
    action:
      - service: select.select_option
        data:
          option: >-
            {% set t = now() %}
            {%- if (( t.hour >= 7 and t.hour < 9 ) or ( t.hour >= 17 and t.hour < 20 )) and
            is_state('binary_sensor.workday_sensor', 'on') %}
              peak
            {%- elif (( t.hour >= 9 and t.hour < 17 ) or ( t.hour >= 20 and t.hour < 22 )) and 
            is_state('binary_sensor.workday_sensor', 'on') %}
              shoulder
            {%- else -%}
              off-peak
            {%- endif -%}
        target:
          entity_id:
            - select.electricity_imported_power_daily
    mode: single
